diff --git a/src/main/scala/system/TestHarness.scala b/src/main/scala/system/TestHarness.scala
index bf29c6d9..8f78a5ac 100644
--- a/src/main/scala/system/TestHarness.scala
+++ b/src/main/scala/system/TestHarness.scala
@@ -8,7 +8,7 @@ import freechips.rocketchip.devices.debug.Debug
 import freechips.rocketchip.diplomacy.LazyModule
 import freechips.rocketchip.util.AsyncResetReg
 
-class TestHarness()(implicit p: Parameters) extends Module {
+class TestHarness2()(implicit p: Parameters) extends Module {
   val io = IO(new Bundle {
     val success = Output(Bool())
   })
diff --git a/src/main/scala/util/HellaQueue.scala b/src/main/scala/util/HellaQueue.scala
index 39df57f9..b05cde56 100644
--- a/src/main/scala/util/HellaQueue.scala
+++ b/src/main/scala/util/HellaQueue.scala
@@ -47,6 +47,7 @@ class HellaQueue[T <: Data](val entries: Int)(data: => T) extends Module {
   val fq = Module(new HellaFlowQueue(entries)(data))
   fq.io.enq <> io.enq
   io.deq <> Queue(fq.io.deq, 1, pipe = true)
+  io.count := fq.io.count
 }
 
 object HellaQueue {
diff --git a/src/main/scala/util/ResetCatchAndSync.scala b/src/main/scala/util/ResetCatchAndSync.scala
index 70fd447a..82e0bef0 100644
--- a/src/main/scala/util/ResetCatchAndSync.scala
+++ b/src/main/scala/util/ResetCatchAndSync.scala
@@ -23,7 +23,7 @@ class ResetCatchAndSync (sync: Int = 3) extends Module {
   // those flops) and on the output of the synchronizer circuit (to control
   // reset to any flops this circuit drives).
 
-  val post_psd_reset = Mux(io.psd.test_mode, io.psd.test_mode_reset, reset)
+  val post_psd_reset = Mux(io.psd.test_mode, io.psd.test_mode_reset, reset.asBool)
   withReset(post_psd_reset) {
     io.sync_reset := Mux(io.psd.test_mode, io.psd.test_mode_reset,
       ~AsyncResetSynchronizerShiftReg(true.B, sync))
